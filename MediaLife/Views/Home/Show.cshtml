@model ShowPageModel
@{
    ViewData["Title"] = Model.Show.PosterName;
    ViewData["Section"] = Model.SiteSection;
}

<div class="title">
    <h1 id="showName" class="edit-list-hide">@Model.Show.Name</h1>
    <input type="text" id="editListTitle" class="edit-list-show" value="@Model.Show.Name" onchange="page.editedListChanged();" />
    @if (Model.SiteSection == SiteSection.Books)
    {
        <div id="author">@Model.Show.ShowAuthor</div>
    }
    <div class="buttons add-to-list-hide">
        @if (!Model.ShowListOptions)
        {
            string buttonName = "";
            if (Model.SiteSection == SiteSection.TV) { buttonName = "Show"; }
            if (Model.SiteSection == SiteSection.Movies) { buttonName = "Movie" + (Model.Show.EpisodeCount > 1 ? "s" : ""); }
            if (Model.SiteSection == SiteSection.Books) { buttonName = "Book" + (Model.Show.EpisodeCount > 1 ? "s" : ""); }

            @Html.Button($"Add {buttonName}", new("plus"), "page.addShow()", new() { Colour = ButtonColour.Green, Classes = $"button add {(Model.Show.Added == null ? "" : "hide")}" }, new() { { "id", "addShowButton" } })
            @Html.Button($"Remove {buttonName}", new("xmark"), "page.removeShow()", new() { Colour = ButtonColour.Red, Classes = $"button remove {(Model.Show.Added != null && Model.Show.Episodes.Count(e => e.Watched != null || e.StartedWatching != null) == 0 ? "" : "hide")}" }, new() { { "id", "removeShowButton" } })
            @Html.Button(new Icon("filter"), "page.toggleFilterMenu()", new() { Classes = $"button settings {(Model.Show.Added != null ? "" : "hide")}" }, new() { { "id", "showFilterButton" } })
            @Html.Button(new Icon("gear"), "page.toggleSettingsMenu()", new() { Classes = $"button settings {(Model.Show.Added != null ? "" : "hide")}" }, new() { { "id", "showSettingsButton" } })
        }
        else
        {
            @Html.Button("Edit List", new("pencil"), "page.editList()", new() { Classes = "button edit edit-list-hide" })
            @Html.Button("Save List", new("check"), "page.editListSave()", new() { Colour = ButtonColour.Green, Classes = "button add save edit-list-show" })
            @Html.Button("Cancel", new("xmark"), "page.editListCancel()", new() { Colour = ButtonColour.Red, Classes = "button remove edit-list-show" })
            @Html.Button(new Icon("trash-can"), "page.deleteList()", new() { Classes = "button delete edit-list-show" })
        }
    </div>
</div>

<div id="blackout" class="hide" onclick="page.toggleSettingsMenu()"></div>
<form id="settings_form" onsubmit="page.saveSettings(); return false;">
    <div id="filter_menu" class="settings_menu @(Model.ShowListOptions ? "for_list" : "") hide">
        @Html.FormRowFor(m => Model.Show.HideWatched, new() { Style = FormRowStyle.BlockRow })
        @Html.FormRowFor(m => Model.Show.HideUnplayable, new() { Style = FormRowStyle.BlockRow })
        @Html.SubmitRow("Save", new() { Thin = true })
    </div>
    <div id="settings_menu" class="settings_menu @(Model.ShowListOptions ? "for_list" : "") hide">
        @Html.FormRowFor(m => Model.Show.RecommendedBy, new() { Style = FormRowStyle.BlockRow, DataList = Model.Recommenders })
        @Html.FormRowFor(m => Model.Show.DownloadLimit, new() { Style = FormRowStyle.BlockRow })
        @Html.FormRowFor(m => Model.Show.DeleteWatched, new() { Style = FormRowStyle.BlockRow })
        @Html.FormRowFor(m => Model.Show.WatchFromNextPlayable, new() { Style = FormRowStyle.BlockRow })
        @Html.FormRowFor(m => Model.Show.DownloadAllTogether, new() { Style = FormRowStyle.BlockRow })
        @Html.FormRowFor(m => Model.Show.KeepAllDownloaded, new() { Style = FormRowStyle.BlockRow })
        @if (Model.SiteSection == SiteSection.TV)
        {
            var seriesList = new List<SelectListItem>();
            int? prevSeries = Model.Show.Episodes.FirstOrDefault()?.SeriesNumber;

            seriesList.Add(new() { Text = "-", Value = prevSeries.ToString() });
            foreach (EpisodeModel episode in Model.Show.Episodes)
            {
                if (prevSeries != episode.SeriesNumber)
                {
                    seriesList.Add(new() { Text = episode.SeriesNumber.ToString(), Value = episode.SeriesNumber.ToString(), Selected = Model.Show.SkipUntilSeries == episode.SeriesNumber });
                }
                prevSeries = episode.SeriesNumber;
            }

            @Html.FormRowFor(m => Model.Show.SkipUntilSeries, new() { Style = FormRowStyle.BlockRow, SelectOptions = seriesList, WithSelectHandle = true })
        }
        @Html.SubmitRow("Save", new() { Thin = true })

        @if (Model.SiteSection == SiteSection.YouTube)
        {
            @Html.ButtonRow(new() {
                Html.Button($"YouTube {(Model.Show.Id.StartsWith("PL") ? "Playlist" : "Channel")}", new() { ClickEvent = "page.openNetwork();", IconRight = new("arrow-up-right-from-square"), Colour = ButtonColour.Transparent })       
            }, new() { Justify = RowJustify.Center })
        }
    </div>
</form>

<div id="page-content">
    @if (Model.SiteSection == SiteSection.TV && !Model.Show.HideWatched && !Model.Show.HideUnplayable)
    {
        <div id="series_list_wrapper"><ul id="series_list"></ul></div>
    }
    @{
        string posterClass = "";
        if (Model.SiteSection == SiteSection.YouTube)
        {
            posterClass = Model.Show.Id.StartsWith("PL") ? "wide" : "round";
        }
    }
    <div id="episode_list"></div>
    <div>
        <div id="poster" class="@posterClass"></div>
        <div id="network">
            @if (Model.SiteSection == SiteSection.TV && Model.Show.Network != null && !string.IsNullOrEmpty(Model.Show.Network.Name))
            {
                @Html.Button(Model.Show.Network.Name, new() { ClickEvent = "page.openNetwork();", IconRight = new("arrow-up-right-from-square"), Colour = ButtonColour.Transparent })
            }
            @if (Model.SiteSection == SiteSection.YouTube)
            {
                @Html.Button($"YouTube {(Model.Show.Id.StartsWith("PL") ? "Playlist" : "Channel")}", new() { ClickEvent = "page.openNetwork();", IconRight = new("arrow-up-right-from-square"), Colour = ButtonColour.Transparent })
            }
        </div>
    </div>
</div>